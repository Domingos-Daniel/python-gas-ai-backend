#!/usr/bin/env python3
"""Testa a detec√ß√£o de tipos de gr√°ficos na pergunta do usu√°rio"""

import requests
import json

def test_chart_detection():
    """Testa se o sistema detecta corretamente os tipos de gr√°ficos solicitados"""
    
    test_cases = [
        {
            "question": "An√°lise do setor petrol√≠fero em Angola com gr√°fico de linha",
            "expected_types": ["line"],
            "description": "Portugu√™s com 'linha'"
        },
        {
            "question": "Mostre a evolu√ß√£o temporal do setor petrol√≠fero angolano",
            "expected_types": ["line"],
            "description": "Portugu√™s com 'evolu√ß√£o temporal'"
        },
        {
            "question": "Compara√ß√£o entre empresas de petr√≥leo em Angola - gr√°fico de barras",
            "expected_types": ["bar"],
            "description": "Portugu√™s com 'barras'"
        },
        {
            "question": "An√°lise de participa√ß√£o de mercado com gr√°fico de pizza",
            "expected_types": ["pie"],
            "description": "Portugu√™s com 'pizza'"
        },
        {
            "question": "Dashboard de KPIs do setor petrol√≠fero angolano",
            "expected_types": ["kpi"],
            "description": "Portugu√™s com 'KPIs'"
        }
    ]
    
    print("üß™ TESTANDO DETEC√á√ÉO DE GR√ÅFICOS")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìä Teste {i}: {test_case['description']}")
        print(f"Pergunta: {test_case['question']}")
        print(f"Esperado: {test_case['expected_types']}")
        
        try:
            # Testa o endpoint diretamente
            response = requests.post('http://localhost:8000/analyze', json={
                'question': test_case['question'],
                'chart_types': test_case['expected_types'],
                'analysis_type': 'comprehensive'
            })
            
            if response.status_code == 200:
                data = response.json()
                
                # Extrai os tipos de gr√°ficos gerados
                charts_found = False
                chart_types_in_response = []
                
                if 'answer' in data:
                    # Procura por gr√°ficos no campo answer (base64)
                    if 'data:image/png;base64,' in data['answer']:
                        charts_found = True
                        chart_count = data['answer'].count('data:image/png;base64,')
                        
                        # Tenta identificar o tipo de gr√°fico pela pergunta
                        if 'linha' in test_case['question'].lower() or 'evolu√ß√£o' in test_case['question'].lower():
                            chart_types_in_response.append('line')
                        if 'barra' in test_case['question'].lower():
                            chart_types_in_response.append('bar')
                        if 'pizza' in test_case['question'].lower():
                            chart_types_in_response.append('pie')
                        if 'kpi' in test_case['question'].lower():
                            chart_types_in_response.append('kpi')
                        
                        # Se n√£o conseguiu identificar, usa os tipos solicitados
                        if not chart_types_in_response:
                            chart_types_in_response = test_case['expected_types']
                
                print(f"‚úÖ Status: {response.status_code}")
                print(f"üìà Gr√°ficos encontrados: {chart_count if charts_found else 0} ({', '.join(chart_types_in_response) if charts_found else 'nenhum'})")
                
                # Verifica se os tipos esperados est√£o presentes
                expected_found = any(chart_type in chart_types_in_response for chart_type in test_case['expected_types'])
                print(f"‚úÖ Tipos esperados encontrados: {'Sim' if expected_found else 'N√£o'}")
                
            else:
                print(f"‚ùå Erro: {response.status_code}")
                print(f"Resposta: {response.text[:200]}")
                
        except Exception as e:
            print(f"‚ùå Erro ao conectar: {e}")
        
        print("-" * 30)

def test_frontend_detection():
    """Testa a fun√ß√£o de detec√ß√£o do frontend (simula√ß√£o)"""
    
    def detectChartTypes(question: str) -> list:
        """Simula a fun√ß√£o do frontend"""
        lowerQuestion = question.lower()
        
        chartKeywords = {
            'line': ['linha', 'linear', 'tend√™ncia', 'tendencia', 'evolu√ß√£o', 'evolucao', 's√©rie temporal', 'serie temporal', 'temporal'],
            'bar': ['barra', 'barras', 'coluna', 'colunas', 'compara√ß√£o', 'comparacao', 'versus', 'vs'],
            'pie': ['pizza', 'torta', 'setor', 'participa√ß√£o', 'participacao', 'percentual', 'propor√ß√£o', 'proporcao'],
            'donut': ['donut', 'anel', 'rosquinha', 'rosca'],
            'kpi': ['kpi', 'indicador', 'm√©trica', 'metrica', 'dashboard', 'painel'],
            'production': ['produ√ß√£o', 'producao', 'extracao', 'extra√ß√£o', 'output'],
            'financial': ['financeiro', 'financeira', 'custos', 'receitas', 'lucros', 'despesas']
        }
        
        detectedTypes = []
        
        for chartType, keywords in chartKeywords.items():
            if any(keyword in lowerQuestion for keyword in keywords):
                detectedTypes.append(chartType)
        
        if len(detectedTypes) == 0 and 'gr√°fico' in lowerQuestion:
            return ['bar']
        
        return detectedTypes if detectedTypes else ["pie", "bar"]
    
    print("\nüß™ TESTANDO FUN√á√ÉO DE DETEC√á√ÉO DO FRONTEND")
    print("=" * 50)
    
    test_questions = [
        "An√°lise do setor petrol√≠fero em Angola com gr√°fico de linha",
        "Mostre a evolu√ß√£o temporal do setor",
        "Compara√ß√£o com gr√°fico de barras",
        "Participa√ß√£o de mercado em pizza",
        "Dashboard de KPIs"
    ]
    
    for question in test_questions:
        result = detectChartTypes(question)
        print(f"Pergunta: {question}")
        print(f"Detectado: {result}")
        print("-" * 30)

if __name__ == "__main__":
    test_chart_detection()
    test_frontend_detection()