"""
Script simplificado para iniciar o servidor FastAPI.
Use este script como alternativa ao setup.py complexo.
"""
import sys
import subprocess
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_essential_imports():
    """Verifica se as importa√ß√µes essenciais funcionam."""
    try:
        import fastapi
        import uvicorn
        import google.generativeai
        logger.info("‚úÖ Importa√ß√µes essenciais OK")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Falta depend√™ncia: {e}")
        logger.info("Execute: python install_essential.py")
        return False

def check_env():
    """Verifica arquivo .env b√°sico."""
    env_path = Path(".env")
    if not env_path.exists():
        logger.info("Criando arquivo .env b√°sico...")
        with open(".env", "w") as f:
            f.write("""# Configure sua chave API do Gemini
GEMINI_API_KEY=sua_chave_aqui
INDEX_DIR=./storage
HOST=0.0.0.0
PORT=8000
DEBUG=True
""")
        logger.warning("‚ö†Ô∏è Configure GEMINI_API_KEY no arquivo .env")
        return False
    
    # Verifica se est√° configurado
    content = env_path.read_text()
    if "sua_chave_aqui" in content:
        logger.warning("‚ö†Ô∏è Configure GEMINI_API_KEY no arquivo .env")
        return False
    
    logger.info("‚úÖ Arquivo .env configurado")
    return True

def ensure_data():
    """Garante que existe pasta data com exemplo."""
    data_path = Path("data")
    data_path.mkdir(exist_ok=True)
    
    example_file = data_path / "exemplo.txt"
    if not example_file.exists():
        example_file.write_text("""
Informa√ß√µes sobre energia em Angola:

Angola √© um importante produtor de petr√≥leo em √Åfrica, com v√°rias empresas
internacionais operando no pa√≠s, incluindo Total Energies, que tem
participa√ß√£o significativa no setor de explora√ß√£o e produ√ß√£o.

A Total Energies Angola opera em diversos blocos offshore e onshore,
contribuindo para o desenvolvimento do setor energ√©tico do pa√≠s.
""")
    
    logger.info("‚úÖ Dados de exemplo dispon√≠veis")

def start_simple_server():
    """Inicia servidor com configura√ß√£o b√°sica."""
    try:
        logger.info("üöÄ Iniciando servidor FastAPI...")
        logger.info("üìç URL: http://localhost:8000")
        logger.info("üìö Docs: http://localhost:8000/docs")
        logger.info("‚èπÔ∏è Pressione Ctrl+C para parar")
        
        subprocess.run([
            sys.executable, "-m", "uvicorn",
            "app.main:app",
            "--reload",
            "--host", "0.0.0.0", 
            "--port", "8000"
        ])
        
    except KeyboardInterrupt:
        logger.info("üõë Servidor parado")
    except FileNotFoundError:
        logger.error("‚ùå uvicorn n√£o encontrado - instale com: pip install uvicorn")
    except Exception as e:
        logger.error(f"‚ùå Erro: {e}")

def main():
    logger.info("=== Inicializa√ß√£o Simplificada ===")
    
    # 1. Verifica importa√ß√µes
    if not check_essential_imports():
        return
    
    # 2. Verifica configura√ß√£o
    if not check_env():
        logger.info("Configure o .env e execute novamente")
        return
    
    # 3. Garante dados
    ensure_data()
    
    # 4. Inicia servidor
    start_simple_server()

if __name__ == "__main__":
    main()
