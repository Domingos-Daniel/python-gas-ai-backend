"""
Teste para verificar se o advanced_data_analyzer_fixed est√° usando dados reais.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.advanced_data_analyzer_fixed import AdvancedDataAnalyzerFixed
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_dados_reais():
    """Testa se o analisador est√° usando dados reais."""
    print("üß™ Iniciando teste de dados reais...")
    
    # Inicializa o analisador
    analyzer = AdvancedDataAnalyzerFixed()
    
    # Testes com diferentes contextos
    test_questions = [
        "An√°lise de investimentos da Total em Angola",
        "Performance financeira da Sonangol em 2024",
        "Produ√ß√£o de petr√≥leo da Azule Energy",
        "An√°lise de mercado do setor petrol√≠fero angolano",
        "KPIs de efici√™ncia operacional da Chevron"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n{'='*60}")
        print(f"Teste {i}: {question}")
        print(f"{'='*60}")
        
        try:
            result = analyzer.analyze_data(question)
            
            if result is None:
                print("‚ùå An√°lise retornou None - sem dados suficientes")
                continue
            
            # Verifica se h√° dados reais
            metadata = result.get('metadata', {})
            real_data_count = metadata.get('real_data_count', 0)
            data_source = metadata.get('data_source', 'unknown')
            
            print(f"‚úÖ An√°lise conclu√≠da")
            print(f"üìä Fonte de dados: {data_source}")
            print(f"üìà Dados reais encontrados: {real_data_count}")
            
            # Mostra dados extra√≠dos
            data = result.get('data', {})
            if data:
                print(f"\nüìã Dados extra√≠dos ({len(data)} itens):")
                for key, value in list(data.items())[:5]:  # Mostra top 5
                    print(f"  ‚Ä¢ {key}: {value}")
                if len(data) > 5:
                    print(f"  ... e mais {len(data) - 5} itens")
            
            # Mostra KPIs
            kpis = result.get('kpis', {})
            if kpis:
                print(f"\nüìä KPIs calculados ({len(kpis)} m√©tricas):")
                for kpi_name, kpi_data in list(kpis.items())[:3]:  # Mostra top 3
                    print(f"  ‚Ä¢ {kpi_name}: {kpi_data.get('value', 'N/A')} {kpi_data.get('unit', '')}")
            
            # Mostra insights
            insights = result.get('contextual_analysis', {}).get('key_insights', [])
            if insights:
                print(f"\nüí° Insights principais:")
                for insight in insights[:3]:  # Mostra top 3
                    print(f"  ‚Ä¢ {insight}")
            
            # Mostra recomenda√ß√µes
            recommendations = result.get('recommendations', [])
            if recommendations:
                print(f"\nüéØ Recomenda√ß√µes ({len(recommendations)}):")
                for rec in recommendations[:2]:  # Mostra top 2
                    print(f"  ‚Ä¢ {rec.get('category', '')}: {rec.get('recommendation', '')}")
            
            # Verifica se √© baseado em dados reais
            if real_data_count > 0 and data_source == 'real_scraped_data':
                print(f"\n‚úÖ SUCESSO: An√°lise baseada em dados reais!")
            else:
                print(f"\n‚ö†Ô∏è ATEN√á√ÉO: An√°lise pode estar usando dados simulados")
            
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\n{'='*60}")
    print("Teste conclu√≠do!")
    print(f"{'='*60}")

if __name__ == "__main__":
    test_dados_reais()